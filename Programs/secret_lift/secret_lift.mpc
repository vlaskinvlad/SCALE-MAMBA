from Compiler.types import (
    sint,
    regint,
    Array,
)
from Compiler.library import (
    print_ln,
    map_sum,
    if_then,
    end_if,
)
from common.channels import ChannelManager

# cint: clear integers modulo p
# sint: secret integers modulo p
thread_count = 1
parallel_count = 1
n_items = 9

player_dict = {
    'publisher': 0,
    'partner': 1,
}
channel_dict = {
    'ids': 0,
    'flags': 1,
    'exposure': 2,
    'population_size': 3,
    'output': 99,
}


with ChannelManager(player_dict, channel_dict) as lift_channels:
    population_size = lift_channels.public_regint_input('population_size')
    last_percent = Array(1, regint)
    last_percent[0] = -1

    @map_sum(thread_count, parallel_count, population_size, n_items, sint)
    def loop_body(i):
        current_percent = regint(100*i/population_size)
        if_then(current_percent > last_percent[0])
        last_percent[0] = current_percent
        print_ln('%s % complete', current_percent)
        end_if()

        test_id = lift_channels.private_input('publisher', 'ids')
        test_flag = lift_channels.private_input('publisher', 'flags')
        exposure_ts = lift_channels.private_input('publisher', 'exposure')
        purchase_id = lift_channels.private_input('partner', 'ids')
        purchase_value = lift_channels.private_input('partner', 'flags')
        purchase_ts = lift_channels.private_input('partner', 'exposure')

        # using * as an 'and' operation, sticking with arithmetic operations when possible
        valid_purchase = (
            (purchase_value > 0) * (exposure_ts < (purchase_ts + 10))
        )
        valid_value = (
            purchase_value * (exposure_ts < (purchase_ts + 10))
        )

        _id_match = (test_id == purchase_id)
        _test_purch = valid_purchase * (test_flag == 1)
        _control_purch = valid_purchase * (test_flag == 0)
        _test_value = valid_value * (test_flag == 1)
        _control_value = valid_value * (test_flag == 0)
        _test_value_squared = _test_value * _test_value
        _control_value_squared = _control_value * _control_value

        _test_pop = (test_flag == 1)
        _control_pop = (test_flag == 0)

        return (
            _id_match, _test_purch, _control_purch, _test_value, _control_value,
            _test_value_squared, _control_value_squared, _test_pop, _control_pop
        )

    (
        matching_ids, test_purch, control_purch, test_value, control_value,
        test_value_squared, control_value_squared, test_pop, control_pop
    ) = loop_body()

    print_ln('calculation complete, revealing results on output channel...')
    lift_channels.reveal(matching_ids.read())
    lift_channels.reveal(test_purch.read())
    lift_channels.reveal(control_purch.read())
    lift_channels.reveal(test_value.read())
    lift_channels.reveal(control_value.read())
    lift_channels.reveal(test_value_squared.read())
    lift_channels.reveal(control_value_squared.read())
    lift_channels.reveal(test_pop.read())
    lift_channels.reveal(control_pop.read())
    print_ln('done revealing results')
